#include <iostream>
#include <chrono>
#include <thread>
#include <time.h>
#include <Windows.h>
#include <ctime>
#include <cstdlib>
using namespace std;
int main()
{
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	int columes, row, x, y;
	int operation;
	cout << "1-ex" << endl;
	cout << "2-ex" << endl;
	cout << "3-ex" << endl;
	cout << "4-ex" << endl;
	cout << "5-ex" << endl;
	cout << "6-ex" << endl;
	cout << "Enter operation ->>";
	cin >> operation;
	switch (operation)
	{
	case 1:
	{
		int row, column;
		cout << "row -  ";
		cin >> row;
		cout << "col -  ";
		cin >> column;
		char sym;
		cout << "sym - ";
		cin >> sym;
		for (int i = 1; i <= row; i++) {
			for (int j = 1; j <= column; j++)
				cout << sym;
			cout << endl;
		}break;
	case 2:
	{
		cout << "row -> ";
		cin >> row;
		cout << "col -> ";
		cin >> column;
		char sym;
		cout << "sym -> ";
		cin >> sym;

		for (int i = 1; i <= row; i++)
		{
			for (int j = 1; j <= column; j++)
			{
				if (i == 1 || i == row || j == 1 || j == column)
					cout << sym;
				else
					cout << " ";
			}
			cout << endl;
		}
	}break;
	case 3:
	{int sumRange(int start, int end) {
		int sum = 0;
		for (int i = start; i <= end; i++) {
			sum += i;
		}
		return sum;
	}

	int main() {
		int start, end;
		std::cin >> start >> end;
		std::cout << "Sum of numbers in range [" << start << ", " << end << "]: " << sumRange(start, end) << std::endl;
		return 0;
	}
	}break;
	case 4:
	{
		int arr[50], num, temp, i, j;
		cout << " Please, enter the total no. you want to enter: ";
		cin >> num;
		for (i = 0; i < num; i++)
		{
			cout << " Enter the element " << i + 1 << ": ";
			cin >> arr[i];
		}
		for (i = 0, j = num - 1; i < num / 2; i++, j--)
		{
			temp = arr[i];
			arr[i] = arr[j];
			arr[j] = temp;
		}
		cout << "\n Reverse all elements: " << endl;
		for (i = 0; i < num; i++)
		{
			cout << arr[i] << " ";
		}
	}break;
	case 5:
	{struct Pair
	{
		int min;
		int max;
	};

	Pair getMinMax(int arr[], int n)
	{
		struct Pair minmax;
		int i;
		if (n == 1)
		{
			minmax.max = arr[0];
			minmax.min = arr[0];
			return minmax;
		}
		if (arr[0] > arr[1])
		{
			minmax.max = arr[0];
			minmax.min = arr[1];
		}
		else
		{
			minmax.max = arr[1];
			minmax.min = arr[0];
		}

		for (i = 2; i < n; i++)
		{
			if (arr[i] > minmax.max)
				minmax.max = arr[i];

			else if (arr[i] < minmax.min)
				minmax.min = arr[i];
		}
		return minmax;
	}
	int main()
	{
		int arr[] = { 1000, 11, 445,
					  1, 330, 3000 };
		int arr_size = 6;

		struct Pair minmax = getMinMax(arr, arr_size);

		cout << "Minimum element is "
			<< minmax.min << endl;
		cout << "Maximum element is "
			<< minmax.max;
	}break;
	case 6:
	{const int n = 4;
	const int MAX = 1000000;
	int dist[n + 1][n + 1] = {
		{ 0, 0, 0, 0, 0 },    { 0, 0, 10, 15, 20 },
		{ 0, 10, 0, 25, 25 }, { 0, 15, 25, 0, 30 },
		{ 0, 20, 25, 30, 0 },
	};
	int memo[n + 1][1 << (n + 1)];

	int fun(int i, int mask)
	{
		if (mask == ((1 << i) | 3))
			return dist[1][i];
		if (memo[i][mask] != 0)
			return memo[i][mask];
		int res = MAX;
		for (int j = 1; j <= n; j++)
			if ((mask & (1 << j)) && j != i && j != 1)
				res = std::min(res, fun(j, mask & (~(1 << i)))
					+ dist[j][i]);
		return memo[i][mask] = res;
	}
	int main()
	{
		int ans = MAX;
		for (int i = 1; i <= n; i++)
			ans = std::min(ans, fun(i, (1 << (n + 1)) - 1)
				+ dist[i][1]);

		printf("The cost of most efficient tour = %d", ans);

	}break;

	default:
		break;
	}


	}
	return 0;
}





